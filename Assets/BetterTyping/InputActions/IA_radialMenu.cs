//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.0
//     from Assets/BetterTyping/InputActions/IA_radialMenu.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/BetterTyping/InputActions/IA_radialMenu.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @IA_radialMenu: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @IA_radialMenu()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""IA_radialMenu"",
    ""maps"": [
        {
            ""name"": ""typing"",
            ""id"": ""784a95a9-3f6e-415e-b47e-fa9679e76ffd"",
            ""actions"": [
                {
                    ""name"": ""RightScrollwheel"",
                    ""type"": ""Value"",
                    ""id"": ""a994f8ac-52a4-40f7-a989-61b676dbdb1f"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LeftScrollwheel"",
                    ""type"": ""Value"",
                    ""id"": ""f7e5bc35-a07d-4ffe-a7a7-7f6ec22211d6"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": ""StickDeadzone"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Lclk"",
                    ""type"": ""Button"",
                    ""id"": ""6e2f1d83-1678-4249-bb4b-df71279a143c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lclkclk"",
                    ""type"": ""Button"",
                    ""id"": ""3e30d96a-125f-4b09-96a1-8c3804d864a0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""MultiTap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""buttonWest"",
                    ""type"": ""Button"",
                    ""id"": ""3176708d-9f17-4cb5-8250-594fc6a2ead4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""buttonNorth"",
                    ""type"": ""Button"",
                    ""id"": ""c57d5307-1a63-4884-a67a-2c6259f6b4a1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""buttonSouth"",
                    ""type"": ""Button"",
                    ""id"": ""b1cb5d25-2b66-4854-9874-2e4436b7de7b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""buttonEast"",
                    ""type"": ""Button"",
                    ""id"": ""8869fcec-125a-4bd5-8b96-6301b09afb7b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LT"",
                    ""type"": ""Button"",
                    ""id"": ""6ac37013-b714-4941-8b4c-ad0d6e96e2ef"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LB"",
                    ""type"": ""Button"",
                    ""id"": ""2c7293dd-8280-4698-aa39-573ef951d98d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RT"",
                    ""type"": ""Button"",
                    ""id"": ""a35f4059-83f7-4228-bdb4-d1c8f507eb82"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RB"",
                    ""type"": ""Button"",
                    ""id"": ""0d69c3ac-f9c3-45c4-8cc4-325718de2ae4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""daf91219-4fd9-45b8-9c32-f288209f1672"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftScrollwheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4ce4c6da-ccf8-4472-a13f-ec1b86f431c2"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lclk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""610ffbbb-6745-4203-a782-93ab8b56c81e"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""buttonWest"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60b79819-939f-458f-81db-3d6fdb02f7ea"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""buttonNorth"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66a54e19-a7b1-4877-a89e-f554d1274018"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""buttonSouth"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bc287890-e22c-4fac-ab26-4a3450cec222"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""buttonEast"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bab7c14e-803f-4df9-baa8-d80127282a7f"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b69a6aa-d773-4e00-a7f9-43244a9bd21c"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e36d80ab-c2cf-455e-b078-44a43e641a5e"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe6753c4-1984-45ff-9a78-ee661bc78b63"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7c45fae-acba-4c10-8a1f-8e7a19aa21ad"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lclkclk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9813afa4-c25d-41bb-b180-f5159400a525"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightScrollwheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""typing_playStation"",
            ""id"": ""ab66efa0-afdb-4905-8c37-60dd71f39b05"",
            ""actions"": [
                {
                    ""name"": ""L9"",
                    ""type"": ""Value"",
                    ""id"": ""9dfa36bf-d249-4154-b175-be44f070b2a9"",
                    ""expectedControlType"": ""Stick"",
                    ""processors"": ""StickDeadzone"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Lclk"",
                    ""type"": ""Button"",
                    ""id"": ""14421668-838c-4feb-9d73-04f0cd1f47d4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lclkclk"",
                    ""type"": ""Button"",
                    ""id"": ""4d8ffad5-83db-4991-bea3-c3f2a6dbc7b0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""MultiTap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""X"",
                    ""type"": ""Button"",
                    ""id"": ""f1a80524-aa03-42c2-9f4f-30badc78298a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Y"",
                    ""type"": ""Button"",
                    ""id"": ""90868cf2-3a29-487f-aa5a-55baefd9d08e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""A"",
                    ""type"": ""Button"",
                    ""id"": ""a3d5d67a-a8ff-4b7a-a9d8-398e3a7720b5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""B"",
                    ""type"": ""Button"",
                    ""id"": ""5092bbc5-66bb-4c6f-ad32-1fc41d58f44f"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LT"",
                    ""type"": ""Button"",
                    ""id"": ""960c808c-cd9f-4edf-bbe5-af90e3b06b50"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LB"",
                    ""type"": ""Button"",
                    ""id"": ""98928b6a-af10-490d-b7c5-ce1c7a9c0645"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RT"",
                    ""type"": ""Button"",
                    ""id"": ""5df2e976-7391-4f81-b54c-a39dd96e9ff4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RB"",
                    ""type"": ""Button"",
                    ""id"": ""bf9ffc69-fc21-4a95-9087-745f9543c3d1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9147d396-50a6-46a8-bf5e-9045a568d5ba"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""L9"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""466812b5-d68e-43d9-887c-e6ea5753d457"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lclk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""897dea1f-af04-4124-84b2-ddcfa24847aa"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""X"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d8daa5e8-d5c4-4daa-a176-767c5f849f83"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Y"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97c1dcd1-c864-44df-bd8f-09638f154c29"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6ebdc144-2920-4a09-a676-2dcb76b07e1b"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c55587a4-a83c-4ff9-b724-43e9cb7b7023"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5eaa2a1-95c8-4231-8043-9ae7e9fcc388"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ecf49fd-7238-4428-b1f2-af92bf3d1a32"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RT"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd421a0b-b12a-4273-a23d-6ff01b142612"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""922227ae-c0c8-459d-9c1f-a0294eb8a5b4"",
                    ""path"": ""<Gamepad>/leftStickPress"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lclkclk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // typing
        m_typing = asset.FindActionMap("typing", throwIfNotFound: true);
        m_typing_RightScrollwheel = m_typing.FindAction("RightScrollwheel", throwIfNotFound: true);
        m_typing_LeftScrollwheel = m_typing.FindAction("LeftScrollwheel", throwIfNotFound: true);
        m_typing_Lclk = m_typing.FindAction("Lclk", throwIfNotFound: true);
        m_typing_Lclkclk = m_typing.FindAction("Lclkclk", throwIfNotFound: true);
        m_typing_buttonWest = m_typing.FindAction("buttonWest", throwIfNotFound: true);
        m_typing_buttonNorth = m_typing.FindAction("buttonNorth", throwIfNotFound: true);
        m_typing_buttonSouth = m_typing.FindAction("buttonSouth", throwIfNotFound: true);
        m_typing_buttonEast = m_typing.FindAction("buttonEast", throwIfNotFound: true);
        m_typing_LT = m_typing.FindAction("LT", throwIfNotFound: true);
        m_typing_LB = m_typing.FindAction("LB", throwIfNotFound: true);
        m_typing_RT = m_typing.FindAction("RT", throwIfNotFound: true);
        m_typing_RB = m_typing.FindAction("RB", throwIfNotFound: true);
        // typing_playStation
        m_typing_playStation = asset.FindActionMap("typing_playStation", throwIfNotFound: true);
        m_typing_playStation_L9 = m_typing_playStation.FindAction("L9", throwIfNotFound: true);
        m_typing_playStation_Lclk = m_typing_playStation.FindAction("Lclk", throwIfNotFound: true);
        m_typing_playStation_Lclkclk = m_typing_playStation.FindAction("Lclkclk", throwIfNotFound: true);
        m_typing_playStation_X = m_typing_playStation.FindAction("X", throwIfNotFound: true);
        m_typing_playStation_Y = m_typing_playStation.FindAction("Y", throwIfNotFound: true);
        m_typing_playStation_A = m_typing_playStation.FindAction("A", throwIfNotFound: true);
        m_typing_playStation_B = m_typing_playStation.FindAction("B", throwIfNotFound: true);
        m_typing_playStation_LT = m_typing_playStation.FindAction("LT", throwIfNotFound: true);
        m_typing_playStation_LB = m_typing_playStation.FindAction("LB", throwIfNotFound: true);
        m_typing_playStation_RT = m_typing_playStation.FindAction("RT", throwIfNotFound: true);
        m_typing_playStation_RB = m_typing_playStation.FindAction("RB", throwIfNotFound: true);
    }

    ~@IA_radialMenu()
    {
        UnityEngine.Debug.Assert(!m_typing.enabled, "This will cause a leak and performance issues, IA_radialMenu.typing.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_typing_playStation.enabled, "This will cause a leak and performance issues, IA_radialMenu.typing_playStation.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // typing
    private readonly InputActionMap m_typing;
    private List<ITypingActions> m_TypingActionsCallbackInterfaces = new List<ITypingActions>();
    private readonly InputAction m_typing_RightScrollwheel;
    private readonly InputAction m_typing_LeftScrollwheel;
    private readonly InputAction m_typing_Lclk;
    private readonly InputAction m_typing_Lclkclk;
    private readonly InputAction m_typing_buttonWest;
    private readonly InputAction m_typing_buttonNorth;
    private readonly InputAction m_typing_buttonSouth;
    private readonly InputAction m_typing_buttonEast;
    private readonly InputAction m_typing_LT;
    private readonly InputAction m_typing_LB;
    private readonly InputAction m_typing_RT;
    private readonly InputAction m_typing_RB;
    /// <summary>
    /// Provides access to input actions defined in input action map "typing".
    /// </summary>
    public struct TypingActions
    {
        private @IA_radialMenu m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public TypingActions(@IA_radialMenu wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "typing/RightScrollwheel".
        /// </summary>
        public InputAction @RightScrollwheel => m_Wrapper.m_typing_RightScrollwheel;
        /// <summary>
        /// Provides access to the underlying input action "typing/LeftScrollwheel".
        /// </summary>
        public InputAction @LeftScrollwheel => m_Wrapper.m_typing_LeftScrollwheel;
        /// <summary>
        /// Provides access to the underlying input action "typing/Lclk".
        /// </summary>
        public InputAction @Lclk => m_Wrapper.m_typing_Lclk;
        /// <summary>
        /// Provides access to the underlying input action "typing/Lclkclk".
        /// </summary>
        public InputAction @Lclkclk => m_Wrapper.m_typing_Lclkclk;
        /// <summary>
        /// Provides access to the underlying input action "typing/buttonWest".
        /// </summary>
        public InputAction @buttonWest => m_Wrapper.m_typing_buttonWest;
        /// <summary>
        /// Provides access to the underlying input action "typing/buttonNorth".
        /// </summary>
        public InputAction @buttonNorth => m_Wrapper.m_typing_buttonNorth;
        /// <summary>
        /// Provides access to the underlying input action "typing/buttonSouth".
        /// </summary>
        public InputAction @buttonSouth => m_Wrapper.m_typing_buttonSouth;
        /// <summary>
        /// Provides access to the underlying input action "typing/buttonEast".
        /// </summary>
        public InputAction @buttonEast => m_Wrapper.m_typing_buttonEast;
        /// <summary>
        /// Provides access to the underlying input action "typing/LT".
        /// </summary>
        public InputAction @LT => m_Wrapper.m_typing_LT;
        /// <summary>
        /// Provides access to the underlying input action "typing/LB".
        /// </summary>
        public InputAction @LB => m_Wrapper.m_typing_LB;
        /// <summary>
        /// Provides access to the underlying input action "typing/RT".
        /// </summary>
        public InputAction @RT => m_Wrapper.m_typing_RT;
        /// <summary>
        /// Provides access to the underlying input action "typing/RB".
        /// </summary>
        public InputAction @RB => m_Wrapper.m_typing_RB;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_typing; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="TypingActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(TypingActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="TypingActions" />
        public void AddCallbacks(ITypingActions instance)
        {
            if (instance == null || m_Wrapper.m_TypingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TypingActionsCallbackInterfaces.Add(instance);
            @RightScrollwheel.started += instance.OnRightScrollwheel;
            @RightScrollwheel.performed += instance.OnRightScrollwheel;
            @RightScrollwheel.canceled += instance.OnRightScrollwheel;
            @LeftScrollwheel.started += instance.OnLeftScrollwheel;
            @LeftScrollwheel.performed += instance.OnLeftScrollwheel;
            @LeftScrollwheel.canceled += instance.OnLeftScrollwheel;
            @Lclk.started += instance.OnLclk;
            @Lclk.performed += instance.OnLclk;
            @Lclk.canceled += instance.OnLclk;
            @Lclkclk.started += instance.OnLclkclk;
            @Lclkclk.performed += instance.OnLclkclk;
            @Lclkclk.canceled += instance.OnLclkclk;
            @buttonWest.started += instance.OnButtonWest;
            @buttonWest.performed += instance.OnButtonWest;
            @buttonWest.canceled += instance.OnButtonWest;
            @buttonNorth.started += instance.OnButtonNorth;
            @buttonNorth.performed += instance.OnButtonNorth;
            @buttonNorth.canceled += instance.OnButtonNorth;
            @buttonSouth.started += instance.OnButtonSouth;
            @buttonSouth.performed += instance.OnButtonSouth;
            @buttonSouth.canceled += instance.OnButtonSouth;
            @buttonEast.started += instance.OnButtonEast;
            @buttonEast.performed += instance.OnButtonEast;
            @buttonEast.canceled += instance.OnButtonEast;
            @LT.started += instance.OnLT;
            @LT.performed += instance.OnLT;
            @LT.canceled += instance.OnLT;
            @LB.started += instance.OnLB;
            @LB.performed += instance.OnLB;
            @LB.canceled += instance.OnLB;
            @RT.started += instance.OnRT;
            @RT.performed += instance.OnRT;
            @RT.canceled += instance.OnRT;
            @RB.started += instance.OnRB;
            @RB.performed += instance.OnRB;
            @RB.canceled += instance.OnRB;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="TypingActions" />
        private void UnregisterCallbacks(ITypingActions instance)
        {
            @RightScrollwheel.started -= instance.OnRightScrollwheel;
            @RightScrollwheel.performed -= instance.OnRightScrollwheel;
            @RightScrollwheel.canceled -= instance.OnRightScrollwheel;
            @LeftScrollwheel.started -= instance.OnLeftScrollwheel;
            @LeftScrollwheel.performed -= instance.OnLeftScrollwheel;
            @LeftScrollwheel.canceled -= instance.OnLeftScrollwheel;
            @Lclk.started -= instance.OnLclk;
            @Lclk.performed -= instance.OnLclk;
            @Lclk.canceled -= instance.OnLclk;
            @Lclkclk.started -= instance.OnLclkclk;
            @Lclkclk.performed -= instance.OnLclkclk;
            @Lclkclk.canceled -= instance.OnLclkclk;
            @buttonWest.started -= instance.OnButtonWest;
            @buttonWest.performed -= instance.OnButtonWest;
            @buttonWest.canceled -= instance.OnButtonWest;
            @buttonNorth.started -= instance.OnButtonNorth;
            @buttonNorth.performed -= instance.OnButtonNorth;
            @buttonNorth.canceled -= instance.OnButtonNorth;
            @buttonSouth.started -= instance.OnButtonSouth;
            @buttonSouth.performed -= instance.OnButtonSouth;
            @buttonSouth.canceled -= instance.OnButtonSouth;
            @buttonEast.started -= instance.OnButtonEast;
            @buttonEast.performed -= instance.OnButtonEast;
            @buttonEast.canceled -= instance.OnButtonEast;
            @LT.started -= instance.OnLT;
            @LT.performed -= instance.OnLT;
            @LT.canceled -= instance.OnLT;
            @LB.started -= instance.OnLB;
            @LB.performed -= instance.OnLB;
            @LB.canceled -= instance.OnLB;
            @RT.started -= instance.OnRT;
            @RT.performed -= instance.OnRT;
            @RT.canceled -= instance.OnRT;
            @RB.started -= instance.OnRB;
            @RB.performed -= instance.OnRB;
            @RB.canceled -= instance.OnRB;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="TypingActions.UnregisterCallbacks(ITypingActions)" />.
        /// </summary>
        /// <seealso cref="TypingActions.UnregisterCallbacks(ITypingActions)" />
        public void RemoveCallbacks(ITypingActions instance)
        {
            if (m_Wrapper.m_TypingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="TypingActions.AddCallbacks(ITypingActions)" />
        /// <seealso cref="TypingActions.RemoveCallbacks(ITypingActions)" />
        /// <seealso cref="TypingActions.UnregisterCallbacks(ITypingActions)" />
        public void SetCallbacks(ITypingActions instance)
        {
            foreach (var item in m_Wrapper.m_TypingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TypingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="TypingActions" /> instance referencing this action map.
    /// </summary>
    public TypingActions @typing => new TypingActions(this);

    // typing_playStation
    private readonly InputActionMap m_typing_playStation;
    private List<ITyping_playStationActions> m_Typing_playStationActionsCallbackInterfaces = new List<ITyping_playStationActions>();
    private readonly InputAction m_typing_playStation_L9;
    private readonly InputAction m_typing_playStation_Lclk;
    private readonly InputAction m_typing_playStation_Lclkclk;
    private readonly InputAction m_typing_playStation_X;
    private readonly InputAction m_typing_playStation_Y;
    private readonly InputAction m_typing_playStation_A;
    private readonly InputAction m_typing_playStation_B;
    private readonly InputAction m_typing_playStation_LT;
    private readonly InputAction m_typing_playStation_LB;
    private readonly InputAction m_typing_playStation_RT;
    private readonly InputAction m_typing_playStation_RB;
    /// <summary>
    /// Provides access to input actions defined in input action map "typing_playStation".
    /// </summary>
    public struct Typing_playStationActions
    {
        private @IA_radialMenu m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public Typing_playStationActions(@IA_radialMenu wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "typing_playStation/L9".
        /// </summary>
        public InputAction @L9 => m_Wrapper.m_typing_playStation_L9;
        /// <summary>
        /// Provides access to the underlying input action "typing_playStation/Lclk".
        /// </summary>
        public InputAction @Lclk => m_Wrapper.m_typing_playStation_Lclk;
        /// <summary>
        /// Provides access to the underlying input action "typing_playStation/Lclkclk".
        /// </summary>
        public InputAction @Lclkclk => m_Wrapper.m_typing_playStation_Lclkclk;
        /// <summary>
        /// Provides access to the underlying input action "typing_playStation/X".
        /// </summary>
        public InputAction @X => m_Wrapper.m_typing_playStation_X;
        /// <summary>
        /// Provides access to the underlying input action "typing_playStation/Y".
        /// </summary>
        public InputAction @Y => m_Wrapper.m_typing_playStation_Y;
        /// <summary>
        /// Provides access to the underlying input action "typing_playStation/A".
        /// </summary>
        public InputAction @A => m_Wrapper.m_typing_playStation_A;
        /// <summary>
        /// Provides access to the underlying input action "typing_playStation/B".
        /// </summary>
        public InputAction @B => m_Wrapper.m_typing_playStation_B;
        /// <summary>
        /// Provides access to the underlying input action "typing_playStation/LT".
        /// </summary>
        public InputAction @LT => m_Wrapper.m_typing_playStation_LT;
        /// <summary>
        /// Provides access to the underlying input action "typing_playStation/LB".
        /// </summary>
        public InputAction @LB => m_Wrapper.m_typing_playStation_LB;
        /// <summary>
        /// Provides access to the underlying input action "typing_playStation/RT".
        /// </summary>
        public InputAction @RT => m_Wrapper.m_typing_playStation_RT;
        /// <summary>
        /// Provides access to the underlying input action "typing_playStation/RB".
        /// </summary>
        public InputAction @RB => m_Wrapper.m_typing_playStation_RB;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_typing_playStation; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="Typing_playStationActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(Typing_playStationActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="Typing_playStationActions" />
        public void AddCallbacks(ITyping_playStationActions instance)
        {
            if (instance == null || m_Wrapper.m_Typing_playStationActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Typing_playStationActionsCallbackInterfaces.Add(instance);
            @L9.started += instance.OnL9;
            @L9.performed += instance.OnL9;
            @L9.canceled += instance.OnL9;
            @Lclk.started += instance.OnLclk;
            @Lclk.performed += instance.OnLclk;
            @Lclk.canceled += instance.OnLclk;
            @Lclkclk.started += instance.OnLclkclk;
            @Lclkclk.performed += instance.OnLclkclk;
            @Lclkclk.canceled += instance.OnLclkclk;
            @X.started += instance.OnX;
            @X.performed += instance.OnX;
            @X.canceled += instance.OnX;
            @Y.started += instance.OnY;
            @Y.performed += instance.OnY;
            @Y.canceled += instance.OnY;
            @A.started += instance.OnA;
            @A.performed += instance.OnA;
            @A.canceled += instance.OnA;
            @B.started += instance.OnB;
            @B.performed += instance.OnB;
            @B.canceled += instance.OnB;
            @LT.started += instance.OnLT;
            @LT.performed += instance.OnLT;
            @LT.canceled += instance.OnLT;
            @LB.started += instance.OnLB;
            @LB.performed += instance.OnLB;
            @LB.canceled += instance.OnLB;
            @RT.started += instance.OnRT;
            @RT.performed += instance.OnRT;
            @RT.canceled += instance.OnRT;
            @RB.started += instance.OnRB;
            @RB.performed += instance.OnRB;
            @RB.canceled += instance.OnRB;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="Typing_playStationActions" />
        private void UnregisterCallbacks(ITyping_playStationActions instance)
        {
            @L9.started -= instance.OnL9;
            @L9.performed -= instance.OnL9;
            @L9.canceled -= instance.OnL9;
            @Lclk.started -= instance.OnLclk;
            @Lclk.performed -= instance.OnLclk;
            @Lclk.canceled -= instance.OnLclk;
            @Lclkclk.started -= instance.OnLclkclk;
            @Lclkclk.performed -= instance.OnLclkclk;
            @Lclkclk.canceled -= instance.OnLclkclk;
            @X.started -= instance.OnX;
            @X.performed -= instance.OnX;
            @X.canceled -= instance.OnX;
            @Y.started -= instance.OnY;
            @Y.performed -= instance.OnY;
            @Y.canceled -= instance.OnY;
            @A.started -= instance.OnA;
            @A.performed -= instance.OnA;
            @A.canceled -= instance.OnA;
            @B.started -= instance.OnB;
            @B.performed -= instance.OnB;
            @B.canceled -= instance.OnB;
            @LT.started -= instance.OnLT;
            @LT.performed -= instance.OnLT;
            @LT.canceled -= instance.OnLT;
            @LB.started -= instance.OnLB;
            @LB.performed -= instance.OnLB;
            @LB.canceled -= instance.OnLB;
            @RT.started -= instance.OnRT;
            @RT.performed -= instance.OnRT;
            @RT.canceled -= instance.OnRT;
            @RB.started -= instance.OnRB;
            @RB.performed -= instance.OnRB;
            @RB.canceled -= instance.OnRB;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="Typing_playStationActions.UnregisterCallbacks(ITyping_playStationActions)" />.
        /// </summary>
        /// <seealso cref="Typing_playStationActions.UnregisterCallbacks(ITyping_playStationActions)" />
        public void RemoveCallbacks(ITyping_playStationActions instance)
        {
            if (m_Wrapper.m_Typing_playStationActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="Typing_playStationActions.AddCallbacks(ITyping_playStationActions)" />
        /// <seealso cref="Typing_playStationActions.RemoveCallbacks(ITyping_playStationActions)" />
        /// <seealso cref="Typing_playStationActions.UnregisterCallbacks(ITyping_playStationActions)" />
        public void SetCallbacks(ITyping_playStationActions instance)
        {
            foreach (var item in m_Wrapper.m_Typing_playStationActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Typing_playStationActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="Typing_playStationActions" /> instance referencing this action map.
    /// </summary>
    public Typing_playStationActions @typing_playStation => new Typing_playStationActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "typing" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="TypingActions.AddCallbacks(ITypingActions)" />
    /// <seealso cref="TypingActions.RemoveCallbacks(ITypingActions)" />
    public interface ITypingActions
    {
        /// <summary>
        /// Method invoked when associated input action "RightScrollwheel" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRightScrollwheel(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LeftScrollwheel" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftScrollwheel(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Lclk" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLclk(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Lclkclk" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLclkclk(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "buttonWest" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnButtonWest(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "buttonNorth" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnButtonNorth(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "buttonSouth" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnButtonSouth(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "buttonEast" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnButtonEast(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LT" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLT(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LB" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLB(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RT" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRT(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RB" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRB(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "typing_playStation" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="Typing_playStationActions.AddCallbacks(ITyping_playStationActions)" />
    /// <seealso cref="Typing_playStationActions.RemoveCallbacks(ITyping_playStationActions)" />
    public interface ITyping_playStationActions
    {
        /// <summary>
        /// Method invoked when associated input action "L9" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnL9(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Lclk" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLclk(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Lclkclk" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLclkclk(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "X" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnX(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Y" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnY(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "A" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnA(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "B" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnB(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LT" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLT(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LB" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLB(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RT" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRT(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "RB" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnRB(InputAction.CallbackContext context);
    }
}
